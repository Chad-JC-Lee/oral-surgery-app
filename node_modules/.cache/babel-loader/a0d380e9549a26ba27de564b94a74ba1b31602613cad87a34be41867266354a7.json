{"ast":null,"code":"import{getApiKey}from'../config/api';// Google AI Studio API服務\nclass GoogleAiService{constructor(){this.endpoint='https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';this.retryCount=0;this.maxRetries=3;}// 生成症狀描述選項\nasync generateSymptomOptions(symptomId,symptomName){let isSubLevel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let parentOption=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let combinedDescription=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';const apiKey=getApiKey();if(!apiKey){throw new Error('API key未設置，請在開發環境中設置API key');}const prompt=this.buildPrompt(symptomId,symptomName,isSubLevel,parentOption,combinedDescription);try{console.log('發送API請求到:',this.endpoint);console.log('API Key長度:',apiKey.length);console.log('是否為第二層:',isSubLevel);console.log('父選項:',parentOption);console.log('綜合描述:',combinedDescription);const requestBody={contents:[{parts:[{text:prompt}]}]};console.log('請求內容:',JSON.stringify(requestBody,null,2));const response=await fetch(`${this.endpoint}?key=${apiKey}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});console.log('API響應狀態:',response.status);console.log('API響應頭:',Object.fromEntries(response.headers.entries()));if(!response.ok){const errorText=await response.text();console.error('API錯誤響應:',errorText);// 檢查是否是服務過載錯誤\nif(response.status===503||errorText.includes('overloaded')||errorText.includes('UNAVAILABLE')){throw new Error('AI服務暫時過載，請稍後再試');}throw new Error(`API請求失敗: ${response.status} - ${errorText}`);}const data=await response.json();console.log('API成功響應:',data);this.retryCount=0;// 重置重試計數器\nreturn this.parseResponse(data);}catch(error){console.error('Google AI API錯誤:',error);// 如果是服務過載錯誤且未超過重試次數，則重試\nif((error.message.includes('過載')||error.message.includes('503'))&&this.retryCount<this.maxRetries){this.retryCount++;console.log(`重試第 ${this.retryCount} 次...`);await this.delay(1000*this.retryCount);// 指數退避\nreturn this.generateSymptomOptions(symptomId,symptomName,isSubLevel,parentOption,combinedDescription);}throw error;}}// 延遲函數\ndelay(ms){return new Promise(resolve=>setTimeout(resolve,ms));}// 構建提示詞\nbuildPrompt(symptomId,symptomName){let isSubLevel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let parentOption=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let combinedDescription=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';if(isSubLevel){// 第二層：根據第一層選擇生成更精細的選項\nif(parentOption==='combined'&&combinedDescription){// 多維度評估結果\nreturn`\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據多維度評估的結果，猜測接下來要講的主訴。\n\n症狀類型：${symptomName}\n多維度評估結果：${combinedDescription}\n\n要求：\n1. 基於多維度評估結果，模擬病人的角度，生成3個可能的主訴描述\n2. 主訴應該反映病人實際的感受和困擾，例如：\n   - 如果評估結果包含「疼痛模式: 持續性」+「疼痛位置: 喉嚨」+「疼痛性質: 刺痛」，可以說「喉嚨一直刺痛，吃東西和說話都很困難」\n   - 如果評估結果包含「疼痛模式: 間歇性」+「疼痛位置: 手術切口」+「疼痛程度: 7/10分」，可以說「切口那邊會一陣一陣痛，痛起來很厲害」\n   - 如果評估結果包含「疼痛位置: 牙齒」+「疼痛性質: 跳痛」，可以說「牙齒那邊會跳痛，不知道是不是手術的關係」\n3. 主訴要真實反映口腔癌手術後病人的實際感受\n4. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n5. 返回JSON格式\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"complaint_1\",\n      \"title\": \"主訴1\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_2\", \n      \"title\": \"主訴2\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_3\",\n      \"title\": \"主訴3\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n`;}else{// 第二層：根據選擇的主訴生成更詳細的主訴\nreturn`\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據選擇的主訴，進一步描述更詳細的症狀。\n\n第一層症狀：${symptomName}\n已選擇的主訴：${parentOption}\n\n要求：\n1. 基於選擇的主訴，模擬病人的角度，生成3個更詳細的主訴描述\n2. 這些更詳細的主訴應該：\n   - 進一步描述症狀的具體表現\n   - 說明症狀對日常生活的具體影響\n   - 描述症狀的時間、頻率、強度等細節\n   - 反映病人對症狀的具體感受和困擾\n3. 主訴要真實反映口腔癌手術後病人的實際感受\n4. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n5. 返回JSON格式\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"detailed_complaint_1\",\n      \"title\": \"詳細主訴1\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"detailed_complaint_2\", \n      \"title\": \"詳細主訴2\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"detailed_complaint_3\",\n      \"title\": \"詳細主訴3\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n- 這層的主訴要比第一層更詳細、更具體\n`;}}else{// 第一層：生成主要症狀選項\nreturn`\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據症狀類型，猜測可能的主訴。\n\n要求：\n1. 基於症狀類型，模擬病人的角度，生成3個可能的主訴描述\n2. 主訴應該反映口腔癌手術後病人的實際感受和困擾\n3. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n4. 主訴要具體且真實，避免過於專業的醫學術語\n5. 返回JSON格式\n\n症狀類型：${symptomName}\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"complaint_1\",\n      \"title\": \"主訴1\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_2\", \n      \"title\": \"主訴2\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_3\",\n      \"title\": \"主訴3\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n`;}}// 解析API響應\nparseResponse(data){try{const text=data.candidates[0].content.parts[0].text;console.log('AI原始響應:',text);// 嘗試提取JSON\nconst jsonMatch=text.match(/\\{[\\s\\S]*\\}/);if(jsonMatch){const parsed=JSON.parse(jsonMatch[0]);console.log('解析後的JSON:',parsed);return parsed;}// 如果無法解析JSON，返回預設結構\nthrow new Error('無法解析AI響應');}catch(error){console.error('解析AI響應失敗:',error);throw new Error('AI響應格式錯誤');}}}const googleAiService=new GoogleAiService();export default googleAiService;","map":{"version":3,"names":["getApiKey","GoogleAiService","constructor","endpoint","retryCount","maxRetries","generateSymptomOptions","symptomId","symptomName","isSubLevel","arguments","length","undefined","parentOption","combinedDescription","apiKey","Error","prompt","buildPrompt","console","log","requestBody","contents","parts","text","JSON","stringify","response","fetch","method","headers","body","status","Object","fromEntries","entries","ok","errorText","error","includes","data","json","parseResponse","message","delay","ms","Promise","resolve","setTimeout","candidates","content","jsonMatch","match","parsed","parse","googleAiService"],"sources":["/Users/chad/oral_surgery_app_AI_version_20250807_012728/src/services/googleAiService.js"],"sourcesContent":["import { getApiKey } from '../config/api';\n\n// Google AI Studio API服務\nclass GoogleAiService {\n  constructor() {\n    this.endpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\n    this.retryCount = 0;\n    this.maxRetries = 3;\n  }\n\n  // 生成症狀描述選項\n  async generateSymptomOptions(symptomId, symptomName, isSubLevel = false, parentOption = null, combinedDescription = '') {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('API key未設置，請在開發環境中設置API key');\n    }\n    \n    const prompt = this.buildPrompt(symptomId, symptomName, isSubLevel, parentOption, combinedDescription);\n    \n    try {\n      console.log('發送API請求到:', this.endpoint);\n      console.log('API Key長度:', apiKey.length);\n      console.log('是否為第二層:', isSubLevel);\n      console.log('父選項:', parentOption);\n      console.log('綜合描述:', combinedDescription);\n      \n      const requestBody = {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      };\n      \n      console.log('請求內容:', JSON.stringify(requestBody, null, 2));\n      \n      const response = await fetch(`${this.endpoint}?key=${apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      console.log('API響應狀態:', response.status);\n      console.log('API響應頭:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API錯誤響應:', errorText);\n        \n        // 檢查是否是服務過載錯誤\n        if (response.status === 503 || errorText.includes('overloaded') || errorText.includes('UNAVAILABLE')) {\n          throw new Error('AI服務暫時過載，請稍後再試');\n        }\n        \n        throw new Error(`API請求失敗: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API成功響應:', data);\n      this.retryCount = 0; // 重置重試計數器\n      return this.parseResponse(data);\n    } catch (error) {\n      console.error('Google AI API錯誤:', error);\n      \n      // 如果是服務過載錯誤且未超過重試次數，則重試\n      if ((error.message.includes('過載') || error.message.includes('503')) && this.retryCount < this.maxRetries) {\n        this.retryCount++;\n        console.log(`重試第 ${this.retryCount} 次...`);\n        await this.delay(1000 * this.retryCount); // 指數退避\n        return this.generateSymptomOptions(symptomId, symptomName, isSubLevel, parentOption, combinedDescription);\n      }\n      \n      throw error;\n    }\n  }\n\n  // 延遲函數\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // 構建提示詞\n  buildPrompt(symptomId, symptomName, isSubLevel = false, parentOption = null, combinedDescription = '') {\n    if (isSubLevel) {\n      // 第二層：根據第一層選擇生成更精細的選項\n      if (parentOption === 'combined' && combinedDescription) {\n        // 多維度評估結果\n        return `\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據多維度評估的結果，猜測接下來要講的主訴。\n\n症狀類型：${symptomName}\n多維度評估結果：${combinedDescription}\n\n要求：\n1. 基於多維度評估結果，模擬病人的角度，生成3個可能的主訴描述\n2. 主訴應該反映病人實際的感受和困擾，例如：\n   - 如果評估結果包含「疼痛模式: 持續性」+「疼痛位置: 喉嚨」+「疼痛性質: 刺痛」，可以說「喉嚨一直刺痛，吃東西和說話都很困難」\n   - 如果評估結果包含「疼痛模式: 間歇性」+「疼痛位置: 手術切口」+「疼痛程度: 7/10分」，可以說「切口那邊會一陣一陣痛，痛起來很厲害」\n   - 如果評估結果包含「疼痛位置: 牙齒」+「疼痛性質: 跳痛」，可以說「牙齒那邊會跳痛，不知道是不是手術的關係」\n3. 主訴要真實反映口腔癌手術後病人的實際感受\n4. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n5. 返回JSON格式\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"complaint_1\",\n      \"title\": \"主訴1\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_2\", \n      \"title\": \"主訴2\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_3\",\n      \"title\": \"主訴3\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n`;\n      } else {\n        // 第二層：根據選擇的主訴生成更詳細的主訴\n        return `\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據選擇的主訴，進一步描述更詳細的症狀。\n\n第一層症狀：${symptomName}\n已選擇的主訴：${parentOption}\n\n要求：\n1. 基於選擇的主訴，模擬病人的角度，生成3個更詳細的主訴描述\n2. 這些更詳細的主訴應該：\n   - 進一步描述症狀的具體表現\n   - 說明症狀對日常生活的具體影響\n   - 描述症狀的時間、頻率、強度等細節\n   - 反映病人對症狀的具體感受和困擾\n3. 主訴要真實反映口腔癌手術後病人的實際感受\n4. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n5. 返回JSON格式\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"detailed_complaint_1\",\n      \"title\": \"詳細主訴1\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"detailed_complaint_2\", \n      \"title\": \"詳細主訴2\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"detailed_complaint_3\",\n      \"title\": \"詳細主訴3\",\n      \"description\": \"更詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n- 這層的主訴要比第一層更詳細、更具體\n`;\n      }\n    } else {\n      // 第一層：生成主要症狀選項\n      return `\n你現在模擬自己是剛接受完口腔癌切除以及皮瓣重建的病人，根據症狀類型，猜測可能的主訴。\n\n要求：\n1. 基於症狀類型，模擬病人的角度，生成3個可能的主訴描述\n2. 主訴應該反映口腔癌手術後病人的實際感受和困擾\n3. 要考慮手術後的特殊情況，如皮瓣重建、傷口癒合等\n4. 主訴要具體且真實，避免過於專業的醫學術語\n5. 返回JSON格式\n\n症狀類型：${symptomName}\n\n請返回以下JSON格式：\n{\n  \"options\": [\n    {\n      \"id\": \"complaint_1\",\n      \"title\": \"主訴1\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_2\", \n      \"title\": \"主訴2\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    },\n    {\n      \"id\": \"complaint_3\",\n      \"title\": \"主訴3\",\n      \"description\": \"詳細描述這個主訴的具體情況\"\n    }\n  ]\n}\n\n注意：\n- 要從病人的角度出發，模擬真實的主訴表達\n- 要考慮口腔癌手術後的特殊情況\n- 主訴要具體且真實，避免過於專業的醫學術語\n- 要反映病人對症狀的實際感受和困擾\n- 考慮手術後恢復期的特殊需求\n`;\n    }\n  }\n\n  // 解析API響應\n  parseResponse(data) {\n    try {\n      const text = data.candidates[0].content.parts[0].text;\n      console.log('AI原始響應:', text);\n      \n      // 嘗試提取JSON\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n        console.log('解析後的JSON:', parsed);\n        return parsed;\n      }\n      // 如果無法解析JSON，返回預設結構\n      throw new Error('無法解析AI響應');\n    } catch (error) {\n      console.error('解析AI響應失敗:', error);\n      throw new Error('AI響應格式錯誤');\n    }\n  }\n}\n\nconst googleAiService = new GoogleAiService();\nexport default googleAiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}